/*
  获取图片灰度值直方图的 compute shader
*/
#pragma kernel HistogramClear
#pragma kernel Histogram

#pragma warning(disable : 3568)
#pragma exclude_renderers gles gles3 d3d11_9x
#pragma enable_d3d11_debug_symbols

#include "Packages/com.unity.postprocessing/PostProcessing/Shaders/StdLib.hlsl"

// Don't forget to update 'ScratchImage.cs' if you change these values !
#define HISTOGRAM_BINS          128
#define HISTOGRAM_TEXELS        HISTOGRAM_BINS / 4

#if SHADER_API_GLES3 || SHADER_API_METAL
    #define HISTOGRAM_THREAD_X              8
    #define HISTOGRAM_THREAD_Y              8
    #define HISTOGRAM_REDUCTION_THREAD_X    8
    #define HISTOGRAM_REDUCTION_THREAD_Y    8
    #define HISTOGRAM_REDUCTION_ALT_PATH    1
#else
    #define HISTOGRAM_THREAD_X              16
    #define HISTOGRAM_THREAD_Y              16
    #define HISTOGRAM_REDUCTION_THREAD_X    HISTOGRAM_THREAD_X
    #define HISTOGRAM_REDUCTION_THREAD_Y    HISTOGRAM_BINS / HISTOGRAM_THREAD_Y
    #define HISTOGRAM_REDUCTION_ALT_PATH    0
#endif

RWStructuredBuffer<uint>    _HistogramBuffer;
Texture2D<float4>           _Tex;
SamplerState                sampler_LinearClamp;

CBUFFER_START(Params)
    float2 _TexScaledSize; // 经过缩放以与dispatch数量相匹配的贴图大小， x: width, y: height
CBUFFER_END

groupshared uint gs_histogram[HISTOGRAM_BINS];

[numthreads(HISTOGRAM_THREAD_X, 1, 1)]
void HistogramClear(uint dispatchThreadId : SV_DispatchThreadID)
{
    if (dispatchThreadId < HISTOGRAM_BINS)
        _HistogramBuffer[dispatchThreadId] = 0u;
}

[numthreads(HISTOGRAM_THREAD_X, HISTOGRAM_THREAD_Y, 1)]
void Histogram(uint2 dispatchThreadId : SV_DispatchThreadID, uint2 groupThreadId : SV_GroupThreadID)
{
    const uint localThreadId = groupThreadId.y * HISTOGRAM_THREAD_X + groupThreadId.x;

    if (localThreadId < HISTOGRAM_BINS)
    {
        gs_histogram[localThreadId] = 0u;
    }

    float2 ipos = float2(dispatchThreadId);
    float2 uvpos = ipos / _TexScaledSize.xy;
    float3 color = _Tex.SampleLevel(sampler_LinearClamp, uvpos, 0.0).xyz;
    uint colorIdx = color.r * (HISTOGRAM_BINS - 1); // mask图为单通道，因此只读取r通道

    GroupMemoryBarrierWithGroupSync();
    InterlockedAdd(gs_histogram[colorIdx], 1);
    GroupMemoryBarrierWithGroupSync();

    if (localThreadId < HISTOGRAM_BINS)
    {
        InterlockedAdd(_HistogramBuffer[localThreadId], gs_histogram[localThreadId]);
    }
}